/* This library contains information processing functions for the analysis of 
 * signals and the detection of Larsen tones.
 *
 * Copyright (c) 2019-2020, Dario Sanfilippo <sanfilippo.dario at gmail dot com> 
 *
 * All rights reserved.
 */

dt = library("detection.lib");
ma = library("maths.lib");
si = library("signals.lib");
ro = library("routes.lib");
an = library("analyzers.lib");
ba = library("basics.lib");
fi = library("filters.lib");

// Averaging function based on a 1-pole lowpass filter and the T19 time
// constant, that is, the system decays by 1/e^2.2 in "frame" seconds.
avg_t19(frame, x) = si.smooth(ba.tau2pole(frame / 2.2), x);

// NAN-safe division
div(x1, x2) = ba.if(x2 == 0, 0, x1 / x2);

// Backwards Euler's integrator with cut-off frequency.
integrator(cf, x) = x * w(cf) :    (+ : (min(1, max(0)))) 
                                   ~ _
with {
      w(f) = 2 * ma.PI * f / ma.SR;
};

// Root mean square. Averaging frame in seconds.
rms(frame, x) = x * x : avg_t19(frame) : sqrt;

// Spectral centroid through N-th-order recursive adaptive filtering. Analysis 
// frame in seconds. "Denorm" makes it amplitude independent, so the
// last SC calculation is kept when a signal is followed by (quiet) background
// noise.
sc(N, denorm, frame, x) =  ( ( _ , 
                               x) : xover(N) : ro.cross(2) : 
      (rms(frame) - rms(frame)) : div(_, ba.if(denorm, 1, rms(frame, x))) ^ 3 : 
       integrator(1 / frame) ^ 2) * (ma.SR / 2)
                               ~ _;

// N-th-order Butterworth crossover. N must be known at compile-time.
xover(N, cf, x) =  fi.lowpass(N, cf1, x) ,
                   fi.highpass(N, cf1, x)
with {
    cf1 = min(max(cf, 20), ma.SR / 2 - 20);
};

// Zero-crossing indicator function.
zc(x) = x * x' < 0;

// Zero-crossing rate. Analysis frame in seconds.
zcr(frame, x) = zc(x) : avg_t19(frame);


