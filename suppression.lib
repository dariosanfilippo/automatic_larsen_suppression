/* This library contains filtering and modulation functions for the
 * removal of Larsen tones.
 *
 * Copyright (c) 2019-2020, Dario Sanfilippo <sanfilippo.dario at gmail dot com> 
 *
 * All rights reserved.
 */
 
su = library("suppression.lib");
ba = library("basics.lib");
de = library("delays.lib");
ma = library("maths.lib");
si = library("signals.lib");
fi = library("filters.lib");

// angular frequency
w(f) = 2 * ma.PI * f / ma.SR;

// 90-degree phase shift at cut-off
allpass(cf, x) = fi.lowpass(1, cf1, x) - fi.highpass(1, cf1, x)
with {
    cf1 = min(max(20, cf), ma.SR / 2 - 20);
};

// Analytic signal using a Hilbert transform approximation by Olli Niemitalo:
// https://dsp.stackexchange.com/questions/37411/iir-hilbert-transformer/59157#59157
analytic(x) =   real ,
                imaginary
with {
    im_c = (   0.47944111608296202665,
               0.87624358989504858020,
               0.97660296916871658368,
               0.99749940412203375040);
    re_c = (   0.16177741706363166219,
               0.73306690130335572242,
               0.94536301966806279840,
               0.99060051416704042460);
    tf(c, y, x) = c * (x + y') - x'';
    imaginary = x' : seq(i, 4,  tf(ba.take(i + 1, im_c))
                               ~ _);
    real = x : seq(i, 4,  tf(ba.take(i + 1, re_c))
                           ~ _);
};

// biquad section
biquad(a0, a1, a2, b1, b2, x) = fir : + ~ iir
with {
      fir = a0*x+a1*x'+a2*x'';
      iir(fb) = -b1*fb-b2*fb';
};

// biquad bandpass (design by Robert Bristow-Johnson)
bpbi(cf, q, in) = biquad(a0, a1, a2, b1, b2, in)
with {
      cf1 = max(5, min(ma.SR / 2 - 5, cf));
      q1 = max(q, .001);
      alpha = sin(w(cf1))/(2*q1);
      norm = 1+alpha;
      a0 = alpha/norm;
      a1 = 0;
      a2 = -alpha/norm;
      b1 = cos(w(cf1))*-2/norm;
      b2 = (1-alpha)/norm;
};

// BP with normalised output (unity gain at CF regardless of Q factor)
bp_norm(cf, q, x) = svf2blti(cf, q, 1, x) : (! , ! , ! , _ , ! , ! , ! , ! , ! , !);

// Fractional delay lines with delay in seconds
fdl(del, x) = de.fdelaylti(4, 2^16, del * ma.SR, x);

// Single-sideband modulation (frequency shifting)
freq_shift(shift, x) = analytic(x) ,
                       osc_quad(shift) : si.cmul : _ ,
                                                   !;

// Faust's notch filter for clarity
notch(bw, cf, x) = fi.notchw(bw, cf, x);

// 2nd-order SVF zero-delay fd notch
notch2(cf, q, x) = svf2blti(cf, q, 1, x) : 
      (! , ! , ! , ! , ! , ! , ! , _ , ! , !);

// Quadrature oscillator by Martin Vicanek
osc_quad(f) =  tick
               ~ ( _,
                   _)
with {
      init = 1-1';
      k1 = tan(ma.PI * f / ma.SR);
      k2 = 2*k1/(1+k1*k1);
      tick(u, v) = omega-k1*(v+k2*omega),
                   v+k2*omega
      with {
       omega = (u+init)-k1*v;
      };
};

// Invert phase at cut-off
phase_invert(cf, x) = allpass(cf, x) : allpass(cf);

// 2p2z state-variable filter with zero-delay feedback topology
// inputs are cutoff, Q, shelving boost (linear amp.), input signal
// outputs are LP, HP, BP, BP_normalised, LS, HS, BS, notch, peak, AP
svf2blti(cf, q, k, in) =   tick
                           ~ ( _,
                               _) : (  !,
                                       !,
                                       _,
                                       _,
                                       _,
                                       _,
                                       _,
                                       _,
                                       _,
                                       _,
                                       _,
                                       _)
with {
    r = 1/(2*q);
    wa = (2*ma.SR)*tan(w(cf)/2);
    g = wa/ma.SR/2;
    tick(s1, s2) =  u1,
                    u2,
                    lp,
                    hp,
                    bp,
                    bp_norm,
                    ls,
                    hs,
                    b_shelf,
                    notch,
                    peak,
                    ap
    with {
        u1 = v1+bp;
        u2 = v2+lp;
        v1 = hp*g;
        v2 = bp*g;
        hp = (in-2*r*s1-g*s1-s2)/(1+2*r*g+g*g);
        bp = s1+v1;
        lp = s2+v2;
        bp_norm = bp*2*r;
        b_shelf = in+k*bp_norm;
        ls = in+k*lp;
        hs = in+k*hp;
        notch = in-bp_norm;
        ap = in-4*r*bp;
        peak = lp-hp;
    };
};
